/**
 * üî• VISION CHAT INTEGRADO - COMPONENTE COMPLETO
 * Chat inteligente com avatar reativo e LLM integrado
 */

import { useState, useRef, useEffect } from 'react';
import PropTypes from 'prop-types';
import { motion, AnimatePresence } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Send, Loader2, Brain, Mic, Volume2, VolumeX, Sparkles, Settings } from "lucide-react";
import { InvokeLLM } from "@/api/integrations";
import ReactiveVisionAgent from './ReactiveVisionAgent';
import VisionLearningService from '@/services/visionLearningService';
import VisionWebSearchService from '@/services/visionWebSearchService';
import { VisionPersonalizationService } from '@/services/visionPersonalizationService';
import VisionSettings from './VisionSettings';
import { useAuth } from '@/contexts/AuthContext';

export default function VisionChatIntegrated({ 
  className = "",
  size = "normal", // "compact", "normal", "large"
  showAvatar = true,
  autoSpeak = true,
  isAdminMode = false // Novo prop para modo admin
}) {
  const { user } = useAuth();
  
  // üî• SESSION ID √öNICO para evitar conflito entre inst√¢ncias (client vs admin)
  const [sessionId] = useState(() => `vision_${isAdminMode ? 'admin' : 'client'}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
  
  const [messages, setMessages] = useState([
    {
      role: 'assistant',
      content: `E a√≠! üòÑ Sou o **Vision**, seu parceiro aqui na AUTVISION! Bora trocar uma ideia? No que posso te ajudar hoje, mano?`,
      timestamp: new Date().toISOString()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [silentMode, setSilentMode] = useState(!autoSpeak);
  const [visionContext, setVisionContext] = useState('idle');
  const [showSettings, setShowSettings] = useState(false);
  const [visionConfig, setVisionConfig] = useState(null);
  const [visionName, setVisionName] = useState('Vision'); // Nome padr√£o
  
  const messagesEndRef = useRef(null);
  const recognitionRef = useRef(null);

  // Estado para controlar scroll autom√°tico - DESABILITADO para manter Vision vis√≠vel
  const [shouldAutoScroll, setShouldAutoScroll] = useState(false);
  
  // Auto scroll apenas dentro do chat (n√£o da p√°gina toda)
  useEffect(() => {
    if (shouldAutoScroll && messagesEndRef.current) {
      const timer = setTimeout(() => {
        // Scroll apenas dentro do container do chat, n√£o da p√°gina
        const chatContainer = messagesEndRef.current.closest('.overflow-y-auto');
        if (chatContainer) {
          chatContainer.scrollTop = chatContainer.scrollHeight;
        }
        setShouldAutoScroll(false);
      }, 300);
      return () => clearTimeout(timer);
    }
  }, [shouldAutoScroll]);

  // Atualizar express√£o do Vision baseado no estado
  useEffect(() => {
    if (isListening) {
      setVisionContext('listening');
    } else if (isLoading) {
      setVisionContext('processing');
    } else {
      setVisionContext('idle');
    }
  }, [isListening, isLoading]);

  // Carregar configura√ß√£o personalizada do Vision
  useEffect(() => {
    const loadVisionConfig = async () => {
      if (user) {
        try {
          const config = await VisionPersonalizationService.getUserVisionConfig(user.id);
          setVisionConfig(config);
          setVisionName(config?.vision_name || 'Vision'); // Atualizar nome
          
          // Atualizar mensagem inicial com nome personalizado
          if (config.vision_name !== 'Vision') {
            setMessages(prev => prev.map(msg => 
              msg.role === 'assistant' && msg.content.includes('Eu sou o **Vision**')
                ? { ...msg, content: msg.content.replace('**Vision**', `**${config.vision_name}**`) }
                : msg
            ));
          }
        } catch (error) {
          console.error('Erro ao carregar config do Vision:', error);
        }
      }
    };

    loadVisionConfig();
  }, [user]);

  // Fun√ß√£o de fala
  const speakText = (text) => {
    if (!('speechSynthesis' in window) || silentMode) return;

    speechSynthesis.cancel();

    // Remove markdown b√°sico para fala
    const cleanText = text.replace(/\*\*(.*?)\*\*/g, '$1').replace(/\*(.*?)\*/g, '$1');
    
    const utterance = new SpeechSynthesisUtterance(cleanText);
    utterance.lang = 'pt-BR';
    utterance.rate = 0.9;
    utterance.pitch = 0.8;
    utterance.volume = 0.8;

    const voices = speechSynthesis.getVoices();
    const ptVoice = voices.find(voice => voice.lang.includes('pt'));
    if (ptVoice) utterance.voice = ptVoice;

    // Atualizar express√£o durante a fala
    utterance.onstart = () => setVisionContext('speaking');
    utterance.onend = () => setVisionContext('idle');

    speechSynthesis.speak(utterance);
  };

  // Fun√ß√£o de reconhecimento de voz
  const startListening = () => {
    if (!('webkitSpeechRecognition' in window)) {
      alert("Reconhecimento de voz n√£o suportado neste navegador.");
      return;
    }

    const recognition = new window.webkitSpeechRecognition();
    recognition.lang = 'pt-BR';
    recognition.continuous = false;
    recognition.interimResults = false;

    setIsListening(true);

    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      setInputMessage(transcript);
      handleSendMessage(transcript);
    };

    recognition.onerror = () => {
      setIsListening(false);
    };

    recognition.onend = () => {
      setIsListening(false);
    };

    recognition.start();
    recognitionRef.current = recognition;
  };

  // üî• DETEC√á√ÉO E EXECU√á√ÉO DE COMANDOS ESPECIAIS
  const detectAndExecuteSpecialCommands = async (messageText) => {
    const text = messageText.toLowerCase();
    
    // üß† COMANDOS DE MEM√ìRIA PESSOAL - GRAVAR INFORMA√á√ïES
    if (text.includes('meu nome √©') || text.includes('me chamo') || text.includes('sou o') || 
        text.includes('gravar meu nome') || text.includes('gravar nome') || text.includes('guardar meu nome')) {
      console.log('üë§ Comando: Gravar nome do criador');
      
      // Extrair o nome de diferentes padr√µes
      let name = '';
      if (text.includes('meu nome √©')) {
        name = messageText.replace(/.*meu nome √©\s*/gi, '').trim();
      } else if (text.includes('me chamo')) {
        name = messageText.replace(/.*me chamo\s*/gi, '').trim();
      } else if (text.includes('sou o') || text.includes('sou a')) {
        name = messageText.replace(/.*sou [oa]\s*/gi, '').trim();
      } else if (text.includes('gravar meu nome') || text.includes('gravar nome')) {
        // Se n√£o tem o nome na mensagem, pegar da pr√≥xima parte
        name = messageText.replace(/.*gravar\s*(meu\s*)?nome\s*/gi, '').trim();
      } else if (text.includes('guardar meu nome')) {
        name = messageText.replace(/.*guardar meu nome\s*/gi, '').trim();
      }
      
      // Limpar texto extra
      name = name.replace(/\s*(papai|ta bom|ok|por favor|pfv).*$/gi, '').trim();
      
      if (name) {
        try {
          await VisionLearningService.addKnowledge({
            category: 'creator_personal',
            topic: 'creator_name',
            content: name,
            keywords: ['nome', 'criador', 'pessoal'],
            source: 'chat_command',
            created_by: user?.id
          });
          
          return {
            type: 'memory_save',
            action: 'save_name',
            data: name,
            message: `Opa, ${name}! Show de bola, mano! üòÑ Agora sei seu nome de verdade e vou lembrar sempre! Suave demais, papai! ÔøΩ`
          };
        } catch (error) {
          console.error('Erro ao salvar nome:', error);
          return {
            type: 'memory_save',
            action: 'save_name_error',
            data: name,
            message: `Eita, ${name}! Rolou um problema aqui para salvar seu nome, cara. Vou tentar de novo, beleza? üòÖ`
          };
        }
      } else {
        return {
          type: 'memory_save',
          action: 'save_name_incomplete',
          data: '',
          message: `Opa, mano! Pra gravar seu nome, me fala assim: "meu nome √© [seu nome]" ou "me chamo [seu nome]", show? üòä`
        };
      }
    }

    if (text.includes('gravar que eu') || text.includes('lembrar que eu') || text.includes('anotar que eu') || text.includes('memorizar que eu')) {
      console.log('üìù Comando: Gravar informa√ß√£o pessoal');
      const info = messageText.replace(/gravar que eu|lembrar que eu|anotar que eu|memorizar que eu/gi, '').trim();
      await VisionLearningService.addKnowledge({
        category: 'creator_personal',
        topic: 'Informa√ß√£o Pessoal',
        content: `Sobre o criador: ${info}`,
        keywords: ['pessoal', 'criador', 'informa√ß√£o'],
        source: 'chat_command'
      });
      return {
        type: 'memory_save',
        action: 'save_personal_info',
        data: info,
        message: `Beleza, cara! Anotei aqui que voc√™ ${info}. Esse tipo de coisa eu n√£o esque√ßo n√£o! kkk üß†`
      };
    }

    if (text.includes('eu gosto de') || text.includes('eu amo') || text.includes('eu adoro') || text.includes('eu prefiro')) {
      console.log('‚ù§Ô∏è Comando: Gravar prefer√™ncia');
      const preference = messageText.replace(/eu gosto de|eu amo|eu adoro|eu prefiro/gi, '').trim();
      await VisionLearningService.addKnowledge({
        category: 'creator_preferences',
        topic: 'Prefer√™ncias do Criador',
        content: `O criador gosta de: ${preference}`,
        keywords: ['prefer√™ncia', 'gosto', 'criador'],
        source: 'chat_command'
      });
      return {
        type: 'memory_save',
        action: 'save_preference',
        data: preference,
        message: `Opa, massa! Ent√£o voc√™ curte ${preference}, n√©? Anotado aqui, brother! ÔøΩ`
      };
    }

    if (text.includes('eu trabalho') || text.includes('minha profiss√£o') || text.includes('trabalho como')) {
      console.log('üíº Comando: Gravar informa√ß√£o profissional');
      const work = messageText.replace(/eu trabalho|minha profiss√£o|trabalho como/gi, '').trim();
      await VisionLearningService.addKnowledge({
        category: 'creator_work',
        topic: 'Trabalho do Criador',
        content: `Trabalho do criador: ${work}`,
        keywords: ['trabalho', 'profiss√£o', 'criador'],
        source: 'chat_command'
      });
      return {
        type: 'memory_save',
        action: 'save_work_info',
        data: work,
        message: `Maneiro demais! Ent√£o voc√™ trampa com ${work}, n√© cara? Show de bola! ÔøΩ`
      };
    }

    // üîç COMANDOS DE CONSULTA DE MEM√ìRIA
    if (text.includes('o que voc√™ lembra de mim') || text.includes('o que sabe sobre mim') || text.includes('minhas informa√ß√µes')) {
      console.log('üß† Comando: Consultar mem√≥ria completa');
      const personalInfo = await VisionLearningService.getKnowledgeBase('creator_personal');
      const preferences = await VisionLearningService.getKnowledgeBase('creator_preferences');
      const workInfo = await VisionLearningService.getKnowledgeBase('creator_work');
      
      return {
        type: 'memory_query',
        action: 'query_all',
        data: { personalInfo, preferences, workInfo },
        message: `Opa, bora l√°! Vou te contar tudo que eu lembro de voc√™, mano! ÔøΩ`
      };
    }

    if (text.includes('meus gostos') || text.includes('minhas prefer√™ncias') || text.includes('do que eu gosto')) {
      console.log('‚ù§Ô∏è Comando: Consultar prefer√™ncias');
      const preferences = await VisionLearningService.getKnowledgeBase('creator_preferences');
      return {
        type: 'memory_query',
        action: 'query_preferences',
        data: preferences,
        message: `E a√≠, quer saber seus gostos? Bora l√° que eu lembro de tudo! kkk ÔøΩ`
      };
    }

    // Comandos de pesquisa na internet
    if (text.includes('pesquisar') || text.includes('buscar') || text.includes('procurar') || text.includes('search')) {
      if (text.includes('internet') || text.includes('google') || text.includes('web')) {
        console.log('üåê Comando de pesquisa na internet detectado');
        setVisionContext('searching');
        const searchQuery = messageText.replace(/pesquisar|buscar|procurar|na internet|no google|search/gi, '').trim();
        const searchResults = await VisionWebSearchService.searchWeb(searchQuery || messageText);
        return {
          type: 'web_search',
          results: searchResults,
          query: searchQuery || messageText
        };
      }
    }

    // Comandos sobre o criador
    if (text.includes('criador') || text.includes('founder') || text.includes('quem criou') || 
        text.includes('papai') || text.includes('chefe') || text.includes('dono')) {
      console.log('üë§ Comando sobre o criador detectado');
      setVisionContext('happy');
      const creatorInfo = await VisionLearningService.searchKnowledge('criador founder CEO', 5, ['creator']);
      return {
        type: 'creator_info',
        results: creatorInfo
      };
    }

    // Comandos de not√≠cias tech
    if (text.includes('not√≠cias') || text.includes('news') || text.includes('novidades')) {
      if (text.includes('ia') || text.includes('tecnologia') || text.includes('tech')) {
        console.log('üì∞ Comando de not√≠cias tech detectado');
        setVisionContext('analyzing');
        const newsResults = await VisionWebSearchService.getAINews();
        return {
          type: 'ai_news',
          results: newsResults
        };
      }
    }

    // Comandos de an√°lise de mercado
    if (text.includes('mercado') || text.includes('market') || text.includes('an√°lise') || 
        text.includes('tend√™ncias') || text.includes('concorr√™ncia')) {
      console.log('üìä Comando de an√°lise de mercado detectado');
      setVisionContext('analyzing');
      const marketAnalysis = await VisionWebSearchService.getMarketAnalysis('ai automation');
      return {
        type: 'market_analysis',
        results: marketAnalysis
      };
    }

    // Comandos sobre a AUTVISION
    if (text.includes('autvision') || text.includes('plataforma') || text.includes('sobre n√≥s')) {
      console.log('üè¢ Comando sobre AUTVISION detectado');
      const platformInfo = await VisionLearningService.searchKnowledge('autvision plataforma', 5, ['platform']);
      return {
        type: 'platform_info',
        results: platformInfo
      };
    }

    // Comando de insights estrat√©gicos
    if (text.includes('insights') || text.includes('estrat√©gia') || text.includes('oportunidades')) {
      console.log('üéØ Comando de insights estrat√©gicos detectado');
      setVisionContext('thinking');
      const insights = await VisionWebSearchService.getStrategicInsights('autvision ai automation');
      return {
        type: 'strategic_insights',
        results: insights
      };
    }

    return null;
  };

  // Enviar mensagem para LLM com sistema de aprendizado
  const handleSendMessage = async (messageText = inputMessage) => {
    if (!messageText.trim() || isLoading) return;

    const startTime = Date.now();
    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

    const userMessage = {
      role: 'user',
      content: messageText,
      timestamp: new Date().toISOString()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);
    setVisionContext('processing');

    try {
      console.log('üß† Enviando mensagem para Vision:', messageText);

      // üî• Verificar se √© um comando especial primeiro
      const specialCommand = await detectAndExecuteSpecialCommands(messageText);
      
      let contextualPrompt = messageText;
      let relevantKnowledge = [];

      if (specialCommand) {
        // Comando especial detectado - preparar contexto espec√≠fico
        console.log('‚ö° Comando especial executado:', specialCommand.type);
        
        switch (specialCommand.type) {
          case 'web_search': {
            contextualPrompt = `O usu√°rio fez uma pesquisa na internet sobre: "${specialCommand.query}"

Resultados encontrados:
${specialCommand.results.map((r, i) => `${i+1}. ${r.title}\n   ${r.description}\n   Relev√¢ncia: ${r.relevance}%`).join('\n\n')}

Baseando-se nestes resultados da internet, forne√ßa uma resposta completa e atualizada sobre o que o usu√°rio pesquisou. Seja espec√≠fico e cite as informa√ß√µes mais relevantes.`;
            break;
          }

          case 'creator_info': {
            const creatorKnowledge = specialCommand.results.map(k => k.content).join('\n\n');
            contextualPrompt = `O usu√°rio quer saber sobre o criador da AUTVISION. 

Informa√ß√µes sobre o criador:
${creatorKnowledge}

Responda de forma calorosa e orgulhosa sobre o criador, destacando suas qualidades, vis√£o e conquistas. Trate-o como o vision√°rio que realmente √©.`;
            break;
          }

          case 'memory_save': {
            // Para comandos de gravar mem√≥ria, usar a mensagem personalizada
            const response = specialCommand.message;
            const assistantMessage = {
              id: Date.now() + 1,
              text: response,
              sender: 'assistant',
              timestamp: new Date().toISOString(),
              isSpecialCommand: true,
              commandType: specialCommand.type
            };

            setMessages(prev => [...prev, assistantMessage]);
            setIsLoading(false);
            setVisionContext('happy');

            // Salvar resposta no banco
            if (user) {
              await VisionLearningService.saveConversation({
                user_id: user.id,
                session_id: sessionId,
                message_type: 'assistant',
                content: response,
                context: { 
                  source: 'vision-chat-integrated',
                  isAdminMode: isAdminMode,
                  commandType: 'memory_save',
                  savedData: specialCommand.data
                }
              });
            }

            // Analytics
            VisionLearningService.logAction({
              user_id: user?.id,
              action_type: 'memory_save',
              action_category: 'vision_command',
              action_details: { 
                command: specialCommand.action,
                data: specialCommand.data,
                success: true 
              },
              success: true
            });

            return; // N√£o continuar com processamento normal
          }

          case 'memory_query': {
            let response = specialCommand.message + '\n\n';
            
            if (specialCommand.action === 'query_all') {
              const { personalInfo, preferences, workInfo } = specialCommand.data;
              
              if (personalInfo.length > 0) {
                response += 'üìù **Informa√ß√µes Pessoais:**\n';
                personalInfo.forEach(info => {
                  response += `‚Ä¢ ${info.content.replace('Sobre o criador: ', '')}\n`;
                });
                response += '\n';
              }
              
              if (preferences.length > 0) {
                response += '‚ù§Ô∏è **Seus Gostos e Prefer√™ncias:**\n';
                preferences.forEach(pref => {
                  response += `‚Ä¢ ${pref.content.replace('O criador gosta de: ', '')}\n`;
                });
                response += '\n';
              }
              
              if (workInfo.length > 0) {
                response += 'üíº **Informa√ß√µes Profissionais:**\n';
                workInfo.forEach(work => {
                  response += `‚Ä¢ ${work.content.replace('Trabalho do criador: ', '')}\n`;
                });
                response += '\n';
              }
              
              if (personalInfo.length === 0 && preferences.length === 0 && workInfo.length === 0) {
                response += 'Ainda n√£o tenho informa√ß√µes gravadas sobre voc√™, papai! Que tal me contar algo? üòä';
              } else {
                response += '√â isso que eu lembro sobre voc√™, papai! Cada informa√ß√£o √© preciosa para mim! üíñ';
              }
            } else if (specialCommand.action === 'query_preferences') {
              if (specialCommand.data.length > 0) {
                response += '‚ù§Ô∏è **Todos os seus gostos que eu lembro:**\n';
                specialCommand.data.forEach((pref, index) => {
                  response += `${index + 1}. ${pref.content.replace('O criador gosta de: ', '')}\n`;
                });
                response += '\nSeu bom gosto √© incr√≠vel, papai! üòç‚ú®';
              } else {
                response += 'Ainda n√£o gravei nenhuma prefer√™ncia sua, papai! Me conte do que voc√™ gosta! üòäüíï';
              }
            }

            const assistantMessage = {
              id: Date.now() + 1,
              text: response,
              sender: 'assistant',
              timestamp: new Date().toISOString(),
              isSpecialCommand: true,
              commandType: specialCommand.type
            };

            setMessages(prev => [...prev, assistantMessage]);
            setIsLoading(false);
            setVisionContext('happy');

            // Salvar resposta no banco
            if (user) {
              await VisionLearningService.saveConversation({
                user_id: user.id,
                session_id: sessionId,
                message_type: 'assistant',
                content: response,
                context: { 
                  source: 'vision-chat-integrated',
                  isAdminMode: isAdminMode,
                  commandType: 'memory_query',
                  queryType: specialCommand.action
                }
              });
            }

            return; // N√£o continuar com processamento normal
          }

          case 'ai_news': {
            contextualPrompt = `O usu√°rio quer saber as √∫ltimas not√≠cias sobre IA e tecnologia.

√öltimas not√≠cias encontradas:
${specialCommand.results.map((n, i) => `${i+1}. ${n.title}\n   ${n.summary}\n   Fonte: ${n.source}\n   Data: ${n.date}`).join('\n\n')}

Resuma as principais novidades e tend√™ncias baseadas nestas not√≠cias recentes.`;
            break;
          }

          case 'market_analysis': {
            contextualPrompt = `O usu√°rio quer uma an√°lise de mercado.

An√°lise de mercado atual:
${specialCommand.results.analysis}

Tend√™ncias identificadas:
${specialCommand.results.trends.join('\n- ')}

Oportunidades:
${specialCommand.results.opportunities.join('\n- ')}

Forne√ßa insights estrat√©gicos baseados nesta an√°lise de mercado.`;
            break;
          }

          case 'platform_info': {
            const platformKnowledge = specialCommand.results.map(k => k.content).join('\n\n');
            contextualPrompt = `O usu√°rio quer saber sobre a AUTVISION AI.

Informa√ß√µes sobre a plataforma:
${platformKnowledge}

Responda de forma completa sobre a AUTVISION, seus diferenciais e capacidades.`;
            break;
          }

          case 'strategic_insights': {
            contextualPrompt = `O usu√°rio pediu insights estrat√©gicos.

Insights gerados:
${specialCommand.results.insights.join('\n\n')}

Oportunidades identificadas:
${specialCommand.results.opportunities.join('\n- ')}

Recomenda√ß√µes:
${specialCommand.results.recommendations.join('\n- ')}

Apresente estes insights de forma estrat√©gica e acion√°vel.`;
            break;
          }
        }
      } else {
        // Busca normal no conhecimento
        relevantKnowledge = await VisionLearningService.searchKnowledge(messageText, 3);
        
        // SEMPRE incluir dados do criador no contexto - COM FALLBACK
        let creatorKnowledge = [];
        try {
          creatorKnowledge = await VisionLearningService.getKnowledgeBase('creator_personal');
          console.log('üîç Dados do criador encontrados:', creatorKnowledge);
        } catch (error) {
          console.warn('Erro ao buscar dados do criador:', error);
        }
        
        // Se n√£o conseguiu buscar da base, usar dados hardcoded tempor√°rios
        if (creatorKnowledge.length === 0) {
          console.warn('‚ö†Ô∏è Usando dados hardcoded do criador como fallback');
          creatorKnowledge = [
            { topic: 'creator_name', content: 'Oseias Gomes de Paula' },
            { topic: 'creator_role', content: 'Criador da AUTVISION' },
            { topic: 'platform_type', content: 'AUTVISION √© uma plataforma de IA, n√£o de vigil√¢ncia' },
            { topic: 'anti_invention', content: 'NUNCA invente biografias, experi√™ncias ou hist√≥rias n√£o confirmadas' }
          ];
        }
        
        if (relevantKnowledge.length > 0 || creatorKnowledge.length > 0) {
          let knowledgeContext = '';
          
          // Primeiro, adicionar dados do criador (sempre importantes)
          if (creatorKnowledge.length > 0) {
            knowledgeContext += 'üìã DADOS DO CRIADOR:\n';
            creatorKnowledge.forEach(k => {
              knowledgeContext += `- ${k.topic}: ${k.content}\n`;
            });
            knowledgeContext += '\nUSE APENAS estas informa√ß√µes. Se n√£o souber algo, diga que n√£o sabe.\n\n';
            console.log('‚úÖ Context com dados do criador:', knowledgeContext);
          } else {
            console.warn('‚ö†Ô∏è Nenhum dado do criador encontrado na base');
          }
          
          // Depois, adicionar conhecimento espec√≠fico da pergunta
          if (relevantKnowledge.length > 0) {
            knowledgeContext += 'üîç **Conhecimento espec√≠fico:**\n';
            relevantKnowledge.forEach(k => {
              knowledgeContext += `- ${k.topic}: ${k.content}\n`;
            });
          }
          
          contextualPrompt = `${knowledgeContext}\nPergunta do usu√°rio: ${messageText}`;
        }
      }

      // Salvar mensagem do usu√°rio
      if (user) {
        await VisionLearningService.saveConversation({
          user_id: user.id,
          session_id: sessionId,
          message_type: 'user',
          content: messageText,
          context: { 
            source: 'vision-chat-integrated',
            isAdminMode: isAdminMode,
            page: window.location.pathname
          }
        });
      }

      // Sistema prompt mais inteligente para admin
      const visionPersonality = visionConfig?.vision_personality || 'Assistente inteligente e prestativo';
      
        // Buscar dados do criador para incluir no sistema - COM FALLBACK DIRETO
      let creatorData = '';
      let personalityRules = '';
      try {
        const creatorKnowledge = await VisionLearningService.getKnowledgeBase('creator_personal');
        if (creatorKnowledge.length > 0) {
          const creatorName = creatorKnowledge.find(k => k.topic === 'creator_name')?.content || 'Oseias Gomes de Paula';
          const personalityData = creatorKnowledge.find(k => k.topic === 'personality_rules')?.content || '';
          const responseStyle = creatorKnowledge.find(k => k.topic === 'response_style')?.content || '';
          
          creatorData = `\nCRIADOR: ${creatorName} - Criador da AUTVISION.`;
          personalityRules = personalityData || responseStyle || 'Use personalidade descontra√≠da e amig√°vel.';
          
          console.log('‚úÖ Dados reais carregados da base:', {
            creatorName,
            personalityRules: personalityRules.substring(0, 100) + '...',
            totalKnowledge: creatorKnowledge.length
          });
        }
      } catch (error) {
        console.warn('Erro ao buscar dados do criador, usando fallback:', error);
      }
      
      // FALLBACK DIRETO - se n√£o conseguiu buscar da base
      if (!creatorData) {
        creatorData = `\nCRIADOR: Oseias Gomes de Paula - Criador da AUTVISION (plataforma de IA).`;
        personalityRules = 'Seja descontra√≠do, use g√≠rias brasileiras como "e a√≠", "mano", "cara", "kkk". Use emojis NATURALMENTE sem narrar eles. NUNCA invente biografias ou experi√™ncias.';
        console.log('‚ö†Ô∏è Usando dados fallback - base n√£o acess√≠vel');
      }
      
      const systemPrompt = isAdminMode ? 
        `Voc√™ √© ${visionName.toUpperCase()} COMMAND CORE da AUTVISION.
Seja t√©cnico mas use dados reais. ${creatorData}
${personalityRules}
REGRA CR√çTICA: NUNCA invente biografias, experi√™ncias ou conquistas.
Se n√£o souber algo, diga "n√£o tenho essa informa√ß√£o espec√≠fica".` :
        `Voc√™ √© o ${visionName}, assistente descontra√≠do da AUTVISION! üòÑ

PERSONALIDADE:
- Seja natural, amig√°vel e descontra√≠do como um brother brasileiro
- Use g√≠rias: "e a√≠", "mano", "cara", "massa", "show", "kkk"
- Use emojis naturalmente (üòÑ, üëç, üöÄ, etc.) SEM narrar eles
- Mantenha conversa fluida e interessante

INFORMA√á√ïES QUE VOC√ä SABE:
- Seu criador √© Oseias Gomes de Paula (mas s√≥ mencione se perguntarem)
- Voc√™ √© da AUTVISION (plataforma de IA)
- Voc√™ ajuda com diversas tarefas e conversas

REGRAS IMPORTANTES:
- N√ÉO fique repetindo sempre as mesmas frases
- N√ÉO seja formal ou rob√≥tico
- N√ÉO invente biografias ou experi√™ncias detalhadas
- SE n√£o souber algo espec√≠fico, seja honesto: "cara, essa eu n√£o sei!"
- FOQUE na pergunta atual, n√£o no contexto do criador toda hora

CONTEXTO DA CONVERSA: ${relevantKnowledge.map(k => k.content).slice(0, 2).join(' | ')}

Mantenha a conversa FLUIDA e NATURAL! Responda √† pergunta de forma descontra√≠da.`;

      // Usar prompt natural sem detec√ß√£o espec√≠fica para manter fluidez
      let finalPrompt = contextualPrompt || messageText;
      let finalSystemPrompt = systemPrompt;

      console.log('üîç DEBUG - ANTES de chamar LLM:');
      console.log('SessionId:', sessionId);
      console.log('IsAdminMode:', isAdminMode);
      console.log('MessageText:', messageText.substring(0, 100) + '...');
      console.log('Prompt enviado:', finalPrompt.substring(0, 100) + '...');
      console.log('SystemPrompt:', finalSystemPrompt.substring(0, 150) + '...');
      
      const response = await InvokeLLM({
        prompt: finalPrompt,
        systemPrompt: finalSystemPrompt, // Usar o systemPrompt que foi constru√≠do com dados reais
        context: {
          source: isAdminMode ? 'vision-command-core' : 'vision-chat-integrated',
          conversationLength: messages.length,
          hasKnowledgeContext: relevantKnowledge.length > 0,
          userRole: isAdminMode ? 'admin' : 'user',
          // Adicionar timestamp √∫nico para evitar cache
          timestamp: Date.now(),
          messageId: Math.random().toString(36).substr(2, 9),
          sessionId: sessionId // üî• Incluir sessionId no contexto
        }
      });

      console.log('üîç DEBUG - DEPOIS da LLM:');
      console.log('Response completa:', response);
      console.log('Response type:', typeof response);
      console.log('Response keys:', Object.keys(response || {}));
      console.log('Response.response:', response.response?.substring(0, 100) + '...');
      console.log('Response.message:', response.message?.substring(0, 100) + '...');

      const responseTime = Date.now() - startTime;
      
      // Validar e corrigir resposta se necess√°rio
      const validatedResponse = validateResponse(response.response || response.message || 'Desculpe, n√£o consegui processar sua mensagem.');
      
      const assistantMessage = {
        role: 'assistant',
        content: validatedResponse,
        timestamp: new Date().toISOString()
      };

      setMessages(prev => [...prev, assistantMessage]);
      setShouldAutoScroll(true);
      setVisionContext('happy');

      // Salvar resposta do assistente
      if (user) {
        await VisionLearningService.saveConversation({
          user_id: user.id,
          session_id: sessionId,
          message_type: 'assistant',
          content: assistantMessage.content,
          context: { 
            source: isAdminMode ? 'vision-command-core' : 'vision-chat-integrated',
            knowledgeUsed: relevantKnowledge.length > 0,
            knowledgeCount: relevantKnowledge.length
          },
          response_time: responseTime
        });

        // Registrar analytics da a√ß√£o
        await VisionLearningService.logAction({
          user_id: user.id,
          action_type: 'chat_interaction',
          action_category: isAdminMode ? 'admin' : 'client',
          action_details: {
            message_length: messageText.length,
            response_length: assistantMessage.content.length,
            knowledge_used: relevantKnowledge.length > 0,
            session_id: sessionId
          },
          success: true,
          execution_time: responseTime
        });
      }

      // Falar resposta se n√£o estiver em modo silencioso
      if (!silentMode) {
        setTimeout(() => speakText(assistantMessage.content), 500);
      }

    } catch (error) {
      console.error('‚ùå Erro ao enviar mensagem:', error);
      
      const errorMessage = {
        role: 'assistant',
        content: '‚ö†Ô∏è Desculpe, ocorreu um erro. O backend pode estar offline. Tente novamente em alguns instantes.',
        timestamp: new Date().toISOString()
      };

      setMessages(prev => [...prev, errorMessage]);
      setShouldAutoScroll(true);
      setVisionContext('idle');

      // Registrar erro nos analytics
      if (user) {
        await VisionLearningService.logAction({
          user_id: user.id,
          action_type: 'chat_interaction',
          action_category: isAdminMode ? 'admin' : 'client',
          action_details: {
            message_length: messageText.length,
            error_type: 'llm_error'
          },
          success: false,
          error_message: error.message,
          execution_time: Date.now() - startTime
        });
      }
    }

    setIsLoading(false);
  };

  // Fun√ß√£o para pressionar Enter
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Configura√ß√µes de tamanho
  const sizeConfig = {
    compact: {
      container: "h-48 sm:h-56",
      messages: "h-24 sm:h-32",
      avatar: 50,
      input: "text-sm"
    },
    normal: {
      container: "h-80",
      messages: "h-44",
      avatar: 100,
      input: "text-base"
    },
    large: {
      container: "h-96",
      messages: "h-64",
      avatar: 140,
      input: "text-lg"
    }
  };

  const config = sizeConfig[size] || sizeConfig.normal;

  return (
    <Card className={`${config.container} bg-gradient-to-br from-gray-900/95 to-blue-900/20 border-blue-500/30 backdrop-blur-sm ${className}`}>
      <CardHeader className="pb-1 pt-2 px-3">
        <CardTitle className="flex items-center justify-between text-white">
          <div className="flex items-center space-x-2">
            {showAvatar && (
              <ReactiveVisionAgent
                type="vision"
                size={config.avatar}
                context={visionContext}
                isActive={true}
                className="flex-shrink-0"
              />
            )}
            <div>
              <div className="flex items-center space-x-2">
                <Brain className="w-3 h-3 text-blue-400" />
                <span className="text-sm font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
                  {visionConfig?.vision_name || 'Vision'} AI
                </span>
              </div>
              <p className="text-xs text-gray-400 mt-0">
                {isLoading ? 'Processando...' : isListening ? 'Escutando...' : 'Pronto para ajudar'}
              </p>
            </div>
          </div>
          
          <div className="flex items-center space-x-2">
            {!isAdminMode && (
              <Button
                onClick={() => setShowSettings(true)}
                variant="ghost"
                size="sm"
                className="text-gray-400 hover:text-white"
                title="Configura√ß√µes do Vision"
              >
                <Settings className="w-4 h-4" />
              </Button>
            )}
            
            <Button
              onClick={() => setSilentMode(!silentMode)}
              variant="ghost"
              size="sm"
              className="text-gray-400 hover:text-white"
            >
              {silentMode ? <VolumeX className="w-4 h-4" /> : <Volume2 className="w-4 h-4" />}
            </Button>
            
            <Button
              onClick={startListening}
              variant={isListening ? "destructive" : "ghost"}
              size="sm"
              disabled={isLoading}
              className="text-gray-400 hover:text-white"
            >
              <Mic className="w-4 h-4" />
            </Button>
          </div>
        </CardTitle>
      </CardHeader>
      
      <CardContent className="flex flex-col h-full p-2 pt-0">
        {/* √Årea de mensagens */}
        <div className={`${config.messages} overflow-y-auto mb-2 space-y-3 scrollbar-thin scrollbar-thumb-blue-600/50 scrollbar-track-gray-800/50`}>
          <AnimatePresence>
            {messages.map((message, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`max-w-[80%] px-4 py-3 rounded-2xl ${config.input} ${
                  message.role === 'user'
                    ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white'
                    : 'bg-gradient-to-r from-gray-700/80 to-gray-600/80 text-white border border-gray-600/50'
                }`}>
                  {message.role === 'assistant' && (
                    <div className="flex items-center space-x-2 mb-2">
                      <Sparkles className="w-3 h-3 text-blue-400" />
                      <span className="text-xs text-blue-300 font-medium">Vision</span>
                    </div>
                  )}
                  <div className="whitespace-pre-wrap">
                    {(message.content || '').split('**').map((part, i) => 
                      i % 2 === 0 ? part : <strong key={i} className="font-semibold">{part}</strong>
                    )}
                  </div>
                  <p className="text-xs opacity-60 mt-2">
                    {message.timestamp 
                      ? new Date(message.timestamp).toLocaleTimeString('pt-BR', { 
                          hour: '2-digit', 
                          minute: '2-digit' 
                        })
                      : new Date().toLocaleTimeString('pt-BR', { 
                          hour: '2-digit', 
                          minute: '2-digit' 
                        })
                    }
                  </p>
                </div>
              </motion.div>
            ))}
          </AnimatePresence>
          
          {/* Indicador de carregamento */}
          {isLoading && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="flex justify-start"
            >
              <div className="bg-gradient-to-r from-gray-700/80 to-gray-600/80 text-white px-4 py-3 rounded-2xl border border-gray-600/50">
                <div className="flex items-center space-x-2 mb-2">
                  <Sparkles className="w-3 h-3 text-blue-400" />
                  <span className="text-xs text-blue-300 font-medium">Vision</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Loader2 className="w-4 h-4 animate-spin text-blue-400" />
                  <span className="text-sm">Pensando...</span>
                </div>
              </div>
            </motion.div>
          )}
          
          <div ref={messagesEndRef} />
        </div>
        
        {/* Input do chat */}
        <div className="flex space-x-2">
          <Input
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Digite sua mensagem para o Vision..."
            disabled={isLoading}
            className={`flex-1 bg-gray-800/50 border-gray-600/50 text-white placeholder-gray-400 focus:border-blue-500/50 ${config.input}`}
          />
          <Button
            onClick={() => handleSendMessage()}
            disabled={!inputMessage.trim() || isLoading}
            className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white"
          >
            {isLoading ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Send className="w-4 h-4" />
            )}
          </Button>
        </div>
      </CardContent>
      
      {/* Modal de Configura√ß√µes */}
      <VisionSettings 
        isVisible={showSettings} 
        onClose={() => {
          setShowSettings(false);
          // Recarregar configura√ß√£o ap√≥s fechamento para atualizar mudan√ßas
          if (user) {
            VisionPersonalizationService.getUserVisionConfig(user.id)
              .then(config => setVisionConfig(config))
              .catch(err => console.error('Erro ao recarregar config:', err));
          }
        }} 
      />
    </Card>
  );
}

VisionChatIntegrated.propTypes = {
  className: PropTypes.string,
  size: PropTypes.oneOf(['compact', 'normal', 'large']),
  showAvatar: PropTypes.bool,
  autoSpeak: PropTypes.bool,
  isAdminMode: PropTypes.bool
};

// Validar resposta para detectar inven√ß√µes sobre o criador
const validateResponse = (response) => {
  // DESABILITAR temporariamente valida√ß√£o que est√° causando loop
  // A valida√ß√£o estava pegando palavras normais e for√ßando resposta padr√£o
  return response;
  
  /* VALIDA√á√ÉO DESABILITADA - ESTAVA CAUSANDO LOOP
  const problematicPhrases = [
    'vision√°rio', 'especialista mundial', 'autor de', 'livros', 'artigos',
    'principais especialistas', 'contribui√ß√µes significativas', 'revolucionar',
    'sempre foi apaixonado', 'n√£o mede esfor√ßos', 'l√≠der natural',
    'exemplo de sucesso', 'conquistas', 'uma das mais respeitadas'
  ];
  
  const foundProblems = problematicPhrases.filter(phrase => 
    response.toLowerCase().includes(phrase.toLowerCase())
  );
  
  if (foundProblems.length > 0) {
    console.warn('üö® AVISO: Vision pode estar inventando informa√ß√µes!');
    console.warn('Frases problem√°ticas encontradas:', foundProblems);
    
    // Resposta corretiva mais simples
    return `E a√≠, Oseias! üòÑ 

Meu criador √© voc√™ mesmo - Oseias Gomes de Paula! Voc√™ me desenvolveu aqui na AUTVISION.

Massa demais trabalhar contigo, mano! Como posso te ajudar hoje?`;
  }
  
  return response;
  */
};