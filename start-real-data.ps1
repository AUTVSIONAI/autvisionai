# ==================================================
# üöÄ AUTVISION AI - INICIALIZA√á√ÉO COM DADOS REAIS
# ==================================================

Write-Host "üöÄ AUTVISION AI - INICIALIZA√á√ÉO COM DADOS REAIS" -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Cyan

# VERIFICAR SE EST√Å NO DIRET√ìRIO CORRETO
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå Execute este script no diret√≥rio raiz do frontend!" -ForegroundColor Red
    exit 1
}

# VERIFICAR VARI√ÅVEIS DE AMBIENTE
Write-Host "üîç Verificando configura√ß√£o para dados reais..." -ForegroundColor Yellow

if (-not (Test-Path ".env.local")) {
    Write-Host "‚ùå Arquivo .env.local n√£o encontrado!" -ForegroundColor Red
    exit 1
}

# VERIFICAR SE AS CHAVES DE API EST√ÉO CONFIGURADAS
$envContent = Get-Content ".env.local" -Raw
if ($envContent -match "VITE_USE_REAL_DATA=true" -and $envContent -match "VITE_LLM_MOCK_MODE=false") {
    Write-Host "‚úÖ Configura√ß√£o para dados reais detectada" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Configurando para usar dados reais..." -ForegroundColor Yellow
    
    # GARANTIR QUE EST√Å CONFIGURADO PARA DADOS REAIS
    (Get-Content ".env.local") -replace "VITE_LLM_MOCK_MODE=true", "VITE_LLM_MOCK_MODE=false" | Set-Content ".env.local"
    
    if (-not ($envContent -match "VITE_USE_REAL_DATA=")) {
        Add-Content ".env.local" "`nVITE_USE_REAL_DATA=true"
    }
    
    Write-Host "‚úÖ Configura√ß√£o atualizada para dados reais" -ForegroundColor Green
}

# LIMPAR CACHE E REINSTALAR DEPEND√äNCIAS SE NECESS√ÅRIO
if (-not (Test-Path "node_modules") -or (Get-ChildItem "node_modules" -Force | Measure-Object).Count -eq 0) {
    Write-Host "üîÑ Instalando depend√™ncias..." -ForegroundColor Yellow
    npm install
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Erro na instala√ß√£o das depend√™ncias!" -ForegroundColor Red
        exit 1
    }
}

# VERIFICAR BACKEND
Write-Host "üîç Verificando backend..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:3001/config/health" -Method GET -TimeoutSec 5 -Headers @{'x-api-key' = 'autvision_backend_secure_key_2025'}
    Write-Host "‚úÖ Backend est√° online na porta 3001" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Backend n√£o detectado na porta 3001" -ForegroundColor Yellow
    Write-Host "üìù Para iniciar o backend:" -ForegroundColor Cyan
    Write-Host "   cd ..\autvisionai-backend" -ForegroundColor White
    Write-Host "   npm run dev" -ForegroundColor White
    Write-Host ""
    Write-Host "üîÑ Prosseguindo com frontend (ir√° usar fallback para dados mock se backend estiver offline)..." -ForegroundColor Yellow
}

# VERIFICAR SUPABASE
Write-Host "üîç Testando conex√£o com Supabase..." -ForegroundColor Yellow
try {
    $supabaseUrl = $envContent | Select-String "VITE_SUPABASE_URL=(.+)" | ForEach-Object { $_.Matches[0].Groups[1].Value }
    if ($supabaseUrl) {
        $testUrl = "$supabaseUrl/rest/v1/"
        $response = Invoke-RestMethod -Uri $testUrl -Method GET -TimeoutSec 5
        Write-Host "‚úÖ Supabase est√° online" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è Erro ao conectar com Supabase - verificar credenciais" -ForegroundColor Yellow
}

# INICIAR FRONTEND
Write-Host "üöÄ Iniciando frontend na porta 3002 com dados reais..." -ForegroundColor Green
Write-Host "üåê URL: http://localhost:3002" -ForegroundColor Cyan
Write-Host "üîÑ Modo: DADOS REAIS (Backend + Supabase)" -ForegroundColor Green
Write-Host "üìä Sincroniza√ß√£o: Autom√°tica com fallback para mock" -ForegroundColor Cyan
Write-Host ""
Write-Host "‚ú® Sistema configurado para usar dados reais!" -ForegroundColor Green
Write-Host "   - Backend: http://localhost:3001" -ForegroundColor White
Write-Host "   - Supabase: Configurado" -ForegroundColor White
Write-Host "   - OpenRouter: Configurado" -ForegroundColor White
Write-Host "   - Mock Mode: DESABILITADO" -ForegroundColor White
Write-Host ""

# INICIAR O SERVIDOR DE DESENVOLVIMENTO
npm run dev
