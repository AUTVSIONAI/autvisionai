/**
 * üé§ Teste OpenVoice Real - S√≠ntese de √Åudio
 * Testa a engine real do OpenVoice via Docker
 */

const axios = require('axios');
const fs = require('fs');
const path = require('path');

async function testOpenVoiceReal() {
  console.log('üé§ Testando OpenVoice Real...\n');
  
  const testCases = [
    {
      text: 'Ol√°! Este √© um teste do OpenVoice real rodando via Docker.',
      voice: 'pt-br-female-1',
      description: 'Teste b√°sico com voz feminina'
    },
    {
      text: 'O sistema AUTVISION est√° funcionando perfeitamente com √°udio real.',
      voice: 'pt-br-male-1', 
      description: 'Teste com voz masculina'
    },
    {
      text: 'Parab√©ns! A integra√ß√£o Docker + OpenVoice foi bem-sucedida.',
      voice: 'pt-br-female-2',
      description: 'Teste de confirma√ß√£o'
    }
  ];

  let successCount = 0;
  let totalTests = testCases.length;

  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    
    try {
      console.log(`\nüìù Teste ${i + 1}/${totalTests}: ${testCase.description}`);
      console.log(`üéØ Texto: "${testCase.text}"`);
      console.log(`üéôÔ∏è Voz: ${testCase.voice}`);
      
      const startTime = Date.now();
      
      const response = await axios.post('http://localhost:3005/api/tts/synthesize', {
        text: testCase.text,
        voice: testCase.voice,
        speed: 1.0,
        pitch: 0,
        volume: 0.8,
        lang: 'pt-BR'
      }, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'audio/wav'
        },
        responseType: 'arraybuffer',
        timeout: 30000
      });

      const endTime = Date.now();
      const processingTime = endTime - startTime;
      
      // Verificar se recebemos √°udio
      if (response.data && response.data.length > 0) {
        const audioBase64 = Buffer.from(response.data).toString('base64');
        const audioSize = response.data.length;
        
        console.log(`‚úÖ Sucesso! √Åudio recebido:`);
        console.log(`   üìä Tamanho: ${audioSize} bytes`);
        console.log(`   ‚è±Ô∏è Tempo: ${processingTime}ms`);
        console.log(`   üéµ Base64: ${audioBase64.substring(0, 50)}...`);
        
        // Salvar √°udio para teste (opcional)
        const audioPath = path.join(__dirname, `test_audio_${i + 1}.wav`);
        fs.writeFileSync(audioPath, response.data);
        console.log(`   üíæ Salvo: ${audioPath}`);
        
        successCount++;
      } else {
        console.log(`‚ùå Falha: Nenhum √°udio recebido`);
      }
      
    } catch (error) {
      console.log(`‚ùå Erro no teste ${i + 1}:`);
      console.log(`   üî¥ ${error.message}`);
      if (error.response) {
        console.log(`   üì° Status: ${error.response.status}`);
        console.log(`   üìÑ Resposta: ${error.response.data}`);
      }
    }
  }

  console.log('\n' + '='.repeat(60));
  console.log(`üéØ RESULTADO FINAL:`);
  console.log(`‚úÖ Sucessos: ${successCount}/${totalTests}`);
  console.log(`‚ùå Falhas: ${totalTests - successCount}/${totalTests}`);
  
  if (successCount === totalTests) {
    console.log(`üéâ TODOS OS TESTES PASSARAM! OpenVoice Real est√° funcionando perfeitamente!`);
  } else if (successCount > 0) {
    console.log(`‚ö†Ô∏è Alguns testes falharam. Verifique as configura√ß√µes.`);
  } else {
    console.log(`üî¥ Todos os testes falharam. Verifique se o container est√° rodando.`);
  }
  
  console.log('='.repeat(60));
}

// Executar teste
testOpenVoiceReal().catch(console.error);
